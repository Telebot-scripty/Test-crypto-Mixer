from web3 import Web3
import os
import time

# Connect to Sepolia Testnet using Infura
INFURA_PROJECT_ID = '357ec5dea85f45bc9f3111c6a641a67b'  # Replace with your Infura project ID
w3 = Web3(Web3.HTTPProvider(f'https://sepolia.infura.io/v3/{INFURA_PROJECT_ID}'))

# Check connection
if not w3.is_connected():
    print("Failed to connect to Ethereum testnet")
    exit()

print("Connected to Ethereum Sepolia testnet")

# Step 1: Generate some test accounts
def generate_account():
    account = w3.eth.account.create()
    return account.address, account.key

num_users = 3  # Number of participants
accounts = [generate_account() for _ in range(num_users)]

print("\nGenerated Accounts:")
for i, (address, key) in enumerate(accounts):
    print(f"User {i + 1} -> Address: {address}, Private Key: {key.hex()}")

# Step 2: Assign some ETH to these accounts from your funded account
FUNDED_ACCOUNT_ADDRESS = '0x688a32FA4a1aa6438ED7cC2a5B52dF48d4c25dC9'

# Fetch the private key from environment variable
FUNDED_ACCOUNT_PRIVATE_KEY = os.getenv('FUNDED_ACCOUNT_PRIVATE_KEY')

# Check if private key was loaded successfully
if not FUNDED_ACCOUNT_PRIVATE_KEY:
    print("Private key not found! Make sure to set the environment variable.")
    exit()

def fund_accounts():
    for address, _ in accounts:
        txn = {
            'to': address,
            'value': w3.to_wei(0.0015, 'ether'),  # Sending 0.1 testnet ETH
            'gas': 21000,
            'gasPrice': w3.eth.gas_price,  # Dynamic gas price
            'nonce': w3.eth.get_transaction_count(FUNDED_ACCOUNT_ADDRESS),
        }
        signed_txn = w3.eth.account.sign_transaction(txn, private_key=FUNDED_ACCOUNT_PRIVATE_KEY)
        try:
            tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)  # Corrected here
            print(f"Funding account {address} - Tx Hash: {tx_hash.hex()}")
            w3.eth.wait_for_transaction_receipt(tx_hash)  # Wait for the transaction to be mined
        except Exception as e:
            print(f"Failed to fund account {address}: {str(e)}")

fund_accounts()

# Step 3: Simulate Mixing - Collect ETH into a central address and redistribute
mixing_address, mixing_key = generate_account()  # Central address for mixing

# Collect funds to mixing address
def collect_funds():
    for address, key in accounts:
        balance = w3.eth.get_balance(address)
        if balance > 0:
            txn = {
                'to': mixing_address,
                'value': balance - w3.to_wei(0.001, 'ether'),  # Leave a little for gas
                'gas': 21000,
                'gasPrice': w3.eth.gas_price,  # Dynamic gas price
                'nonce': w3.eth.get_transaction_count(address),
            }
            signed_txn = w3.eth.account.sign_transaction(txn, private_key=key)
            try:
                tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)  # Corrected here
                print(f"Collecting from {address} to mixing address - Tx Hash: {tx_hash.hex()}")
                w3.eth.wait_for_transaction_receipt(tx_hash)  # Wait for the transaction to be mined
            except Exception as e:
                print(f"Failed to collect from {address}: {str(e)}")

collect_funds()

# Redistribute funds to new addresses
def redistribute_funds():
    mixed_balance = w3.eth.get_balance(mixing_address)
    if mixed_balance > 0:
        # Generate new output addresses
        output_addresses = [generate_account() for _ in range(num_users)]
        output_amount = mixed_balance // num_users

        for i, (address, _) in enumerate(output_addresses):
            txn = {
                'to': address,
                'value': output_amount - w3.to_wei(0.001, 'ether'),  # Leave a little for gas
                'gas': 21000,
                'gasPrice': w3.eth.gas_price,  # Dynamic gas price
                'nonce': w3.eth.get_transaction_count(mixing_address) + i,
            }
            signed_txn = w3.eth.account.sign_transaction(txn, private_key=mixing_key)
            try:
                tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)  # Corrected here
                print(f"Redistributing to {address} - Tx Hash: {tx_hash.hex()}")
                w3.eth.wait_for_transaction_receipt(tx_hash)  # Wait for the transaction to be mined
            except Exception as e:
                print(f"Failed to redistribute to {address}: {str(e)}")

redistribute_funds()

print("\nMixing Complete. Funds have been redistributed.")
